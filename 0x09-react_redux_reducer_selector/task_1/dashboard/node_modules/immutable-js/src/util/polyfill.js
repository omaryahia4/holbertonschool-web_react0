/**
 *  Copyright (c) 2015, Jan Biasi.
 *  All rights reserved.
 *
 *  This source code is licensed under the BSD-style license found in the
 *  LICENSE file in the root directory of this source tree. An additional grant
 *  of patent rights can be found in the PATENTS file in the same directory.
 */


/**
 * IE Array.isArray Polyfill
 * developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray
 *
 */
 if(!Array.isArray) {
     Array.isArray = function (vArg) {
       return Object.prototype.toString.call(vArg) === "[object Array]";
    };
 }

/**
 * ES5 Object.assign Polyfill by MDN
 * developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
 *
 * This polyfill doesn't support symbol properties, since ES5
 * doesn't have symbols anyway.
 */
if (!Object.assign) {
    Object.defineProperty(Object, 'assign', {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function(target) {
            'use strict';
            if (target === undefined || target === null) {
                throw new TypeError('Cannot convert first argument to object');
            }

            var to = Object(target);
            for (var i = 1; i < arguments.length; i++) {
                var nextSource = arguments[i];
                if (nextSource === undefined || nextSource === null) {
                    continue;
                }
                nextSource = Object(nextSource);

                var keysArray = Object.keys(Object(nextSource));
                for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {
                    var nextKey = keysArray[nextIndex];
                    var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
                    if (desc !== undefined && desc.enumerable) {
                        to[nextKey] = nextSource[nextKey];
                    }
                }
            }
            return to;
        }
    });
}
